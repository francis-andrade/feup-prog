#include "Product.h"
#include<iomanip>
#include "functions_auxiliary.h"
//Methods--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Default constructor
*/
Product::Product(){
	name = "";
	cost = 0;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
parameter: const string & name - name the product object
parameter: double cost - cost of the new product object
Constructor
*/
Product::Product(const string & name, double cost){
	this->name = name;
	this->cost = cost;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Returns name of the product
*/
string Product::getname() const{
	return name;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Returns cost of the product
*/
double Product::getcost() const{
	return cost;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
Prints the product on the screen
*/
void Product::show() const{
	cout <<setw(20) << name << " |" << setw(5) << setprecision(2) << fixed << cost;
}
// Friend Functions-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
parameter: const Product & product_left - product passed as left parameter
parameter: const Product & product_right - product passed as right parameter
Returns true if product_left costs less than product_right
*/
bool operator<(const Product  & product_left, const Product & product_right){
	return product_left.cost < product_right.cost;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
parameter: ostream & out - ostream where a product is going to be written to
parameter: const Product & product - Product that is going to be written into the ostream
Writes a product into an ostream
*/
ostream& operator<<(ostream &out, const Product &product){
	out << product.name << " ; " << product.cost;
	return out;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
parameter: istream &in - istream where a new product is going to be written from
parameter: Product &product - variable that will store the new product that is going to be read from the istream
Reads a product from an istream
*/
istream& operator>>(istream &in, Product &product){
	string name;//name of the product
	getline(in, name, ';');
	product.name = removespaces(name);
	in >> product.cost;
	return in;
}
